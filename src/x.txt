import React, { useState } from 'react';
import { useAuth } from '../context/AuthProvider'; // התאימי את הנתיב

interface LoginFormProps {
  className?: string;
}

export const LoginForm: React.FC<LoginFormProps> = ({ className }) => {
  const { user, loading, login, register, loginWithGoogle, logout } = useAuth();
  const [isRegistering, setIsRegistering] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    role: 'student' as 'teacher' | 'student'
  });
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // אם עדיין טוען, הראי מצב טעינה
  if (loading) {
    return (
      <div className={`auth-container ${className || ''}`}>
        <div className="loading">Loading...</div>
      </div>
    );
  }

  // אם המשתמש מחובר, הראי מידע על המשתמש
  if (user) {
    return (
      <div className={`user-info ${className || ''}`}>
        <div className="user-details">
          <h3>Hello, {user.username}!</h3>
          <p className="user-role">Role: {user.role}</p>
        </div>
        <button onClick={logout} className="logout-btn">
          Logout
        </button>
      </div>
    );
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsSubmitting(true);

    try {
      if (isRegistering) {
        await register(formData.email, formData.password, formData.role);
      } else {
        await login(formData.email, formData.password);
      }
    } catch (err: any) {
      setError(err.message || 'Authentication failed');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleGoogleLogin = () => {
    setError('');
    loginWithGoogle();
  };

  return (
    <div className={`auth-container ${className || ''}`}>
      <div className="auth-form">
        <h2>{isRegistering ? 'Create Account' : 'Sign In'}</h2>
        
        {error && (
          <div className="error-message">
            {error}
          </div>
        )}
        
        {/* Google Login Button */}
        <button 
          onClick={handleGoogleLogin} 
          className="google-login-btn"
          disabled={isSubmitting}
        >
          <svg width="20" height="20" viewBox="0 0 24 24">
            <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          Continue with Google
        </button>
        
        <div className="divider">
          <span>or</span>
        </div>

        {/* Regular Login/Register Form */}
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="email"
              name="email"
              placeholder="Email address"
              value={formData.email}
              onChange={handleInputChange}
              required
              disabled={isSubmitting}
            />
          </div>
          
          <div className="form-group">
            <input
              type="password"
              name="password"
              placeholder="Password"
              value={formData.password}
              onChange={handleInputChange}
              required
              disabled={isSubmitting}
              minLength={6}
            />
          </div>
          
          {isRegistering && (
            <div className="form-group">
              <select 
                name="role" 
                value={formData.role} 
                onChange={handleInputChange}
                disabled={isSubmitting}
              >
                <option value="student">Student</option>
                <option value="teacher">Teacher</option>
              </select>
            </div>
          )}
          
          <button type="submit" className="submit-btn" disabled={isSubmitting}>
            {isSubmitting 
              ? (isRegistering ? 'Creating Account...' : 'Signing In...') 
              : (isRegistering ? 'Create Account' : 'Sign In')
            }
          </button>
        </form>
        
        <button 
          type="button"
          onClick={() => {
            setIsRegistering(!isRegistering);
            setError('');
            setFormData({ email: '', password: '', role: 'student' });
          }}
          className="switch-mode-btn"
          disabled={isSubmitting}
        >
          {isRegistering 
            ? 'Already have an account? Sign In' 
            : "Don't have an account? Create one"
          }
        </button>
      </div>
    </div>
  );
};